# -*- coding: utf-8 -*-
"""MOVIE RATING PREDICTION WITH PYTHON.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zObdVh7kgvbz1RtWDmdTBlkwcnur1dgG

# ***MOVIE RATING PREDICTION WITH PYTHON-CodeSoft Internship 1***

#  Import libraries...
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""#  Load the dataset"""

data = pd.read_csv("IMDb Movies India.csv", encoding='latin1')
print("Dataset Loaded Successfully!")

"""# View top rows"""

print(data.head())

"""# Basic info"""

print("\nDataset Info:")
print(data.info())

"""# Check for missing values"""

print("\nMissing Values:")
print(data.isnull().sum())

"""# Fill missing values (simple way)"""

# Fill missing values for Rating with the mean
data['Rating'].fillna(data['Rating'].mean(), inplace=True)

# Note: Missing values in other columns (Year, Duration, Genre, Votes, Director, Actor 1, Actor 2, Actor 3)
# still need to be handled based on their data types and analysis requirements.

"""# Drop rows with missing 'Rating'"""

data.dropna(subset=['Rating'], inplace=True)

"""# Encode categorical columns"""

data['Genre'] = data['Genre'].astype('category').cat.codes
data['Director'] = data['Director'].astype('category').cat.codes
data['Actor 1'] = data['Actor 1'].astype('category').cat.codes
data['Actor 2'] = data['Actor 2'].astype('category').cat.codes
data['Actor 3'] = data['Actor 3'].astype('category').cat.codes

"""# Feature selection"""

# Convert 'Votes' to numeric, handling potential errors
data['Votes'] = pd.to_numeric(data['Votes'], errors='coerce').fillna(0)

# Select features and target variable
features = ['Genre', 'Votes', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']
X = data[features]
y = data['Rating']

"""# Split the data"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Train the model"""

model = LinearRegression()
model.fit(X_train, y_train)

"""# Make predictions"""

predictions = model.predict(X_test)

"""# Evaluate the model

"""

mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)
print("\nModel Performance:")
print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Plot actual vs predicted

plt.figure(figsize=(8, 6))
plt.scatter(y_test, predictions, alpha=0.6, color='teal')
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.title("Actual vs Predicted Movie Ratings")
plt.grid(True)
plt.savefig("Actual vs Predicted Movie Ratings.png")
plt.show()

from google.colab import files
files.download("Actual vs Predicted Movie Ratings.png")